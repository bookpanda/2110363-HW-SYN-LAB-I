$date
   Mon Oct 14 20:33:33 2024
$end
$version
  2018.3
$end
$timescale
  1ps
$end
$scope module nano_sc_system $end
$var wire 32 ! p_address [31:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 32 # d_address [31:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var reg 1 & clock $end
$var reg 1 ' nreset $end
$scope module CPU $end
$var wire 32 ! p_address [31:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 32 # d_address [31:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var wire 1 ( clock $end
$var wire 1 ) nreset $end
$var wire 32 * instruction [31:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 5 , rs [4:0] $end
$var wire 5 - rt [4:0] $end
$var wire 5 . rd [4:0] $end
$var wire 11 / reserved [10:0] $end
$var wire 16 0 imm [15:0] $end
$var wire 26 1 addr [25:0] $end
$var reg 32 2 pc [31:0] $end
$var wire 1 3 sel_addpc $end
$var wire 1 4 sel_pc $end
$var wire 30 5 pc_add [29:0] $end
$var wire 1 6 pc_cout $end
$var wire 30 7 pc_add_b [29:0] $end
$var wire 30 8 addr_zeroext [29:0] $end
$var wire 30 9 pc_new [29:0] $end
$var wire 32 : imm_ext [31:0] $end
$var wire 2 ; ext_ops [1:0] $end
$var reg 1 < z_flag $end
$var reg 1 = c_flag $end
$var wire 1 > reg_wr $end
$var wire 1 ? sel_wr $end
$var wire 1 @ sel_data $end
$var wire 1 A sel_b $end
$var wire 1 B z_new $end
$var wire 1 C c_new $end
$var wire 3 D alu_ops [2:0] $end
$var wire 32 E A [31:0] $end
$var wire 32 F B [31:0] $end
$var wire 32 G data_selected [31:0] $end
$var wire 32 H data_S [31:0] $end
$var wire 32 I data_M [31:0] $end
$var wire 32 J B_selected [31:0] $end
$var wire 5 K rw [4:0] $end
$scope module PCADDER $end
$var wire 30 5 S [29:0] $end
$var wire 1 6 Cout $end
$var wire 30 L A [29:0] $end
$var wire 30 7 B [29:0] $end
$var wire 1 M Cin $end
$var parameter 32 N WIDTH [31:0] $end
$upscope $end
$scope module MUXADDPC $end
$var wire 30 7 out [29:0] $end
$var wire 30 O in0 [29:0] $end
$var wire 30 P in1 [29:0] $end
$var wire 1 3 sel $end
$var parameter 32 Q WIDTH [31:0] $end
$upscope $end
$scope module MUXSELPC $end
$var wire 30 9 out [29:0] $end
$var wire 30 5 in0 [29:0] $end
$var wire 30 8 in1 [29:0] $end
$var wire 1 4 sel $end
$var parameter 32 R WIDTH [31:0] $end
$upscope $end
$scope module EXTENDER $end
$var reg 32 S data32 [31:0] $end
$var wire 16 0 data16 [15:0] $end
$var wire 2 ; ext_ops [1:0] $end
$upscope $end
$scope module MUXRW $end
$var wire 5 K out [4:0] $end
$var wire 5 . in0 [4:0] $end
$var wire 5 - in1 [4:0] $end
$var wire 1 ? sel $end
$var parameter 32 T WIDTH [31:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 32 E A [31:0] $end
$var wire 32 F B [31:0] $end
$var wire 32 G data [31:0] $end
$var wire 5 , ra [4:0] $end
$var wire 5 - rb [4:0] $end
$var wire 5 K rw [4:0] $end
$var wire 1 U nwr $end
$var wire 1 ( clock $end
$var integer 32 V i $end
$upscope $end
$scope module MUXDATA $end
$var wire 32 G out [31:0] $end
$var wire 32 H in0 [31:0] $end
$var wire 32 I in1 [31:0] $end
$var wire 1 @ sel $end
$var parameter 32 W WIDTH [31:0] $end
$upscope $end
$scope module MUXB $end
$var wire 32 J out [31:0] $end
$var wire 32 F in0 [31:0] $end
$var wire 32 : in1 [31:0] $end
$var wire 1 A sel $end
$var parameter 32 X WIDTH [31:0] $end
$upscope $end
$scope module ALU $end
$var reg 32 Y S [31:0] $end
$var wire 1 B z $end
$var reg 1 Z Cout $end
$var wire 32 E A [31:0] $end
$var wire 32 J B [31:0] $end
$var wire 1 [ Cin $end
$var wire 3 D alu_ops [2:0] $end
$upscope $end
$scope module CONTROLUNIT $end
$var reg 1 \ sel_pc $end
$var reg 1 ] sel_addpc $end
$var reg 1 ^ sel_wr $end
$var reg 1 _ sel_b $end
$var reg 1 ` sel_data $end
$var reg 1 a reg_wr $end
$var reg 1 b mem_wr $end
$var reg 2 c ext_ops [1:0] $end
$var reg 3 d alu_ops [2:0] $end
$var wire 3 e reserved [2:0] $end
$var wire 6 f opcode [5:0] $end
$var wire 1 B z_flag $end
$var parameter 6 g ORI [5:0] $end
$var parameter 6 h ORUI [5:0] $end
$var parameter 6 i ALU [5:0] $end
$var parameter 6 j LW [5:0] $end
$var parameter 6 k SW [5:0] $end
$var parameter 6 l BEQ [5:0] $end
$var parameter 6 m JMP [5:0] $end
$upscope $end
$upscope $end
$scope module PROGMEM $end
$var wire 32 " data [31:0] $end
$var wire 27 n address [26:0] $end
$var reg 32 o mem $end
$var parameter 32 p DATA_WIDTH [31:0] $end
$var parameter 32 q ADDR_WIDTH [31:0] $end
$upscope $end
$scope module DATAMEM $end
$var wire 32 % data [31:0] $end
$var wire 27 r address [26:0] $end
$var wire 1 $ wr $end
$var wire 1 s clock $end
$var reg 32 t mem $end
$var reg 32 u data_out [31:0] $end
$var integer 32 v i $end
$var parameter 32 w DATA_WIDTH [31:0] $end
$var parameter 32 x ADDR_WIDTH [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !
bx "
bx #
0$
bx %
0&
0'
0(
0)
bx *
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
bx 2
03
04
bx 5
x6
b0 7
b0xxxxxxxxxxxxxxxxxxxxxxxxxx 8
bx 9
b0xxxxxxxxxxxxxxxx :
b0 ;
x<
x=
0>
0?
0@
0A
xB
xC
b0 D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
bx L
1M
b11110 N
b0 O
b0xxxxxxxxxxxxxxxx P
b11110 Q
b11110 R
b0xxxxxxxxxxxxxxxx S
b101 T
1U
b100000 V
b100000 W
b100000 X
bx Y
xZ
x[
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
bx e
bzxxx f
b10000 g
b10001 h
b1 i
b11000 j
b11100 k
b100100 l
b110000 m
bx n
b100000001111100111000001000000 o
b100000 p
b11011 q
bx r
0s
b1000000001111110011000001000000 t
bx u
bx v
b100000 w
b11011 x
$end
#20000
b0 !
b1000000110001100000000000000100 "
b0 #
b1 %
1&
1(
b1000000110001100000000000000100 *
b10000 +
b110 ,
b110 -
b0 .
b100 /
b100 0
b110001100000000000000100 1
b0 2
b1 5
06
b0 7
b110001100000000000000100 8
b1 9
b100 :
0<
0=
1B
0C
b0 E
b0 F
b0 G
b0 H
b1 I
b0 J
b0 K
b0 L
b100 P
b100 S
b0 Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
b0 e
bz100 f
b0 n
b0 r
1s
b1 u
#40000
0&
1'
0(
1)
0s
#60000
b100 !
b1000000111001110000001111101000 "
1&
1(
b1000000111001110000001111101000 *
b10000 +
b111 ,
b111 -
b0 .
b1111101000 /
b1111101000 0
b111001110000001111101000 1
b100 2
b10 5
06
b0 7
b111001110000001111101000 8
b10 9
b1111101000 :
1<
b0 E
b0 F
b0 J
b0 K
b1 L
b1111101000 P
b1111101000 S
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
b0 e
bz000 f
b1 n
1s
#80000
0&
0(
0s
#100000
b1000 !
b1100000100001010000000000000000 "
1&
1(
b1100000100001010000000000000000 *
b11000 +
b100 ,
b101 -
b0 .
b0 /
b0 0
b100001010000000000000000 1
b1000 2
b11 5
06
b0 7
b100001010000000000000000 8
b11 9
b0 :
b0 E
b0 F
b0 J
b0 K
b10 L
b0 P
b0 S
b0 e
b10 n
1s
#120000
0&
0(
0s
#140000
b1100 !
b100100001010010100000000000 "
1&
1(
b100100001010010100000000000 *
b1 +
b100 ,
b101 -
b101 .
b0 /
b10100000000000 0
b100001010010100000000000 1
b1100 2
b100 5
06
b0 7
b100001010010100000000000 8
b100 9
b10100000000000 :
b0 J
b101 K
b11 L
b10100000000000 P
b10100000000000 S
b1 e
b11 n
1s
#160000
0&
0(
0s
#180000
b10000 !
b1110000100001010000000000000000 "
1&
1(
b1110000100001010000000000000000 *
b11100 +
b100 ,
b101 -
b0 .
b0 /
b0 0
b100001010000000000000000 1
b10000 2
b101 5
06
b0 7
b100001010000000000000000 8
b101 9
b0 :
b0 J
b0 K
b100 L
b0 P
b0 S
b100 e
b100 n
1s
#200000
0&
0(
0s
#220000
b10100 !
b100110001000010000000000000 "
1&
1(
b100110001000010000000000000 *
b1 +
b110 ,
b100 -
b100 .
b0 /
b10000000000000 0
b110001000010000000000000 1
b10100 2
b110 5
06
b0 7
b110001000010000000000000 8
b110 9
b10000000000000 :
b0 E
b0 F
b0 J
b100 K
b101 L
b10000000000000 P
b10000000000000 S
b1 e
b101 n
1s
#240000
0&
0(
0s
#260000
b11000 !
b10100000100001110000000000000001 "
1&
1(
b10100000100001110000000000000001 *
b101000 +
b100 ,
b111 -
b0 .
b1 /
b1 0
b100001110000000000000001 1
b11000 2
b111 5
06
b0 7
b100001110000000000000001 8
b111 9
b1 :
b0 E
b0 F
b0 J
b0 K
b110 L
b1 P
b1 S
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
b0 e
bz001 f
b110 n
1s
#280000
0&
0(
0s
#300000
b11100 !
b11000000000000000000000000000010 "
1&
1(
b11000000000000000000000000000010 *
b110000 +
b0 ,
b0 -
b0 .
b10 /
b10 0
b10 1
b11100 2
b1000 5
06
b0 7
b10 8
b1000 9
b10 :
b0 E
b0 F
b0 J
b0 K
b111 L
b10 P
b10 S
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
b0 e
bz010 f
b111 n
1s
#320000
0&
0(
0s
#340000
b100000 !
b10100000000000000000000000000000 "
1&
1(
b10100000000000000000000000000000 *
b101000 +
b0 ,
b0 -
b0 .
b0 /
b0 0
b0 1
b100000 2
b1001 5
06
b0 7
b0 8
b1001 9
b0 :
b0 J
b1000 L
b0 P
b0 S
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
b0 e
bz000 f
b1000 n
1s
#360000
0&
0(
0s
#380000
b100100 !
bx "
bx #
bx %
1&
1(
bx *
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
b100100 2
b1010 5
06
b0 7
b0xxxxxxxxxxxxxxxxxxxxxxxxxx 8
b1010 9
b0xxxxxxxxxxxxxxxx :
xB
xC
bx E
bx F
bx G
bx H
bx I
bx J
bx K
b1001 L
b0xxxxxxxxxxxxxxxx P
b0xxxxxxxxxxxxxxxx S
bx Y
xZ
0\
0]
0^
0_
0`
0a
0b
b0 c
b0 d
bx e
bzxxx f
b1001 n
bx r
1s
bx u
#400000
0&
0(
0s
#420000
b101000 !
bx "
1&
1(
b101000 2
b1011 5
06
b1011 9
x<
x=
b1010 L
x[
b1010 n
1s
#440000
0&
0(
0s
#460000
b101100 !
bx "
1&
1(
b101100 2
b1100 5
06
b1100 9
b1011 L
b1011 n
1s
#480000
0&
0(
0s
#500000
b110000 !
bx "
1&
1(
b110000 2
b1101 5
06
b1101 9
b1100 L
b1100 n
1s
#520000
0&
0(
0s
#540000
b110100 !
bx "
1&
1(
b110100 2
b1110 5
06
b1110 9
b1101 L
b1101 n
1s
#560000
0&
0(
0s
#580000
b111000 !
bx "
1&
1(
b111000 2
b1111 5
06
b1111 9
b1110 L
b1110 n
1s
#600000
0&
0(
0s
#620000
b111100 !
bx "
1&
1(
b111100 2
b10000 5
06
b10000 9
b1111 L
b1111 n
1s
#640000
0&
0(
0s
#660000
b1000000 !
bx "
1&
1(
b1000000 2
b10001 5
06
b10001 9
b10000 L
b10000 n
1s
#680000
0&
0(
0s
#700000
b1000100 !
bx "
1&
1(
b1000100 2
b10010 5
06
b10010 9
b10001 L
b10001 n
1s
#720000
0&
0(
0s
#740000
b1001000 !
bx "
1&
1(
b1001000 2
b10011 5
06
b10011 9
b10010 L
b10010 n
1s
#760000
0&
0(
0s
#780000
b1001100 !
bx "
1&
1(
b1001100 2
b10100 5
06
b10100 9
b10011 L
b10011 n
1s
#800000
0&
0(
0s
#820000
b1010000 !
bx "
1&
1(
b1010000 2
b10101 5
06
b10101 9
b10100 L
b10100 n
1s
#840000
0&
0(
0s
#860000
b1010100 !
bx "
1&
1(
b1010100 2
b10110 5
06
b10110 9
b10101 L
b10101 n
1s
#880000
0&
0(
0s
#900000
b1011000 !
bx "
1&
1(
b1011000 2
b10111 5
06
b10111 9
b10110 L
b10110 n
1s
#920000
0&
0(
0s
#940000
b1011100 !
bx "
1&
1(
b1011100 2
b11000 5
06
b11000 9
b10111 L
b10111 n
1s
#960000
0&
0(
0s
#980000
b1100000 !
bx "
1&
1(
b1100000 2
b11001 5
06
b11001 9
b11000 L
b11000 n
1s
